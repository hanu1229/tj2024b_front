[ 함수 ]
    - 미리 코드(명령어)들을 정의하는 구조
    - 자주 사용되는 코드를 쉽게 관리하고 사용하기 위해서 사용
    - 매개변수(인자값)와 반환(결과값)
    - 라이브러리( 함수들의 집합 )
    - 함수의 모습
        fonction 함수명 ( ) { }
            1. 함수의 종류
                - 내가 만든 함수
                - 이미 만들어져 있는 함수 : 개발자에게 빠른 개발이 가능하도록 도구 제공(라이브러리)
                    - console.log( ), document.write( ), 배열명.push( ), 배열명.splice( )등등
                    - 암기식이 아닌 개발할때 필요에 따라 찾아가면서 개발
    - JS 함수 표현 방법
        1. 선언적 함수 : 선언 키워드를 이용하여 함수를 정의하는 방법 / function 함수명 ( ) { }
        2. 익명 함수 : 함수명이 없이 정의하는 방법 / let 변수명 = function ( ) { };
        3. 람다식(화살표) 함수 : 선언 키워드와 함수명 없이 화살표를 이용한 정의 방법 / let 변수명 = ( ) => { };
    - 함수 만드는 방법
        - function : 함수를 만드는 키워드
        - 함수명 : 변수명과 동일하게 함수를 식별하는 용도 / 관례적으로 카멜표기법으로 작성
                  백엔드는 카멜표기법을 주로 사용, 프론트엔드는 스네이크표기법을 주로 사용
        - (매개변수1, 매개변수2, ...) : 함수가 실행될때 사용하기 위해 가져오는 데이터(값)
        - { } : 함수가 실행될때 처리해야할 코드(명령어)들의 구역
         - return : 함수가 처리한 값을 함수가 호출된 곳으로 데이터(값)을 보내는 역할(키워드)
    - 함수를 호출하는 방법
        함수명(인자값1, 인자값2, ...); : 인자값이 각 매개변수에 대입되고 실행 후 함수의 return값을 반환한다.
    - 함수를 만들어야 하는 이유 : 어떠한 코드를 다음에 재샤용 해야 한다면 만든다.
    - 함수의 특징
        1. 코드를 재사용이 편리함
        2. 미리 정의된 코드에 인자값에 따른 서로 다른 결과물(리턴값)을 얻을 수 있다.
    - 변수의 유효범위
        1. 전역 변수 : 특정한 { } 안에서 선언하지 않은 변수
        2. 지역 변수 : 특정한 { } 안에서 선언한 변수 / 사용이 끝나면 자동으로 할당을 해지
        3. 매개 변수 : 함수호출시 인자값을 저장하는 변수
    - JS 파일의 사용 범위
        1. <head><script src='4_함수.js'></script></head>
            body내 마크업들이 구성되기 전에 스크립트가 실행된다.
        2.<body><script src='4_함수.js'></script></body>
            body마크업 가장 하단에 script마크업을 넣으면 body가 전부 구성된 후 스크립트가 실행된다.
        3. 여러개의 JS파일을 하나의 html에서 호출할때 변수/함수 공유
    - html 마크업 이벤트 속성
        1. <마크업 onclick() = "js코드">
            - onclick(); : 마크업을 클릭했을때 실행되는 js코드


    [ 입출력 관련 함수 ]
        1. console.log( )               : 콘솔에 매개변수를 출력 (반환값 X)
        2. document.write( )            : 매개변수를 HTML Body태그에 출력 (반환값 X)
        3. prompt( )                    : 입력받은 값을 반환(문자열)
        4. document.querySelector( )    : HTML마크업들을 JS객체(DOM객체)로 호출하는 함수
                                          매개변수 : 선택자
                                          반환값 : 지정한 DOM객체
                                        : DOM객체(document) : HTML마크업들을 객체처럼 사용할 수 있는 모델
                                        - document.querySelector(".클래스명");
                                        - document.querySelector("#id명");
                                        - document.querySelector("마크업명");
                                        - document.querySelector(".클래스명 > #id명");
                                        : D(document) O(object) M(model)객체
                                            - value : 마크업의 value 속성값을 호출 또는 대입
                                                - <input/>, <select></select>, <textarea></textarea>
                                            - innerHTML : 마크업 사이에 있는 값(HTML)을 호출 또는 대입
                                                - <input/>, <img/>, <br/>등을 제외하고 모두 가능
                                                    즉, 닫는 마크업이 있다면 사용이 가능
    [ 타입 변환 함수 ]
        1. Number( )                    : 숫자타입으로 변환(데이터 --> 숫자)
        2. String( )                    : 문자열타입으로 변환(데이터 --> 문자열)
        3. parseInt( )                  : 정수타입으로 변환(데이터 --> 정수)

    [내장함수]
        1. 날짜/시간 함수
            - let 객체명 = new Date();
                현재 시스템(컴퓨터)의 날짜와 시간을 반환해주는 객체 생성
                리턴값 : 2024-11-28 12:35:25
            - Date객체 함수
                객체명.getFullYear()    : 현재 날짜와 연도 반환 / 2024
                객체명.getMonth()       : 현재 날짜의 월(0 : 1월, 11 : 12월)반환 / 10(11월)
                객체명.getDate()        : 현재 날짜의 일 반환 / 28
                객체명.getHours()       : 현재 시간의 시 반환 / 12
                객체명.getMinutes()     : 현재 시간의 분 반환 / 37
                객체명.getSeconds()     : 현재 시간의 초 반환 / 35
                객체명.getDay()         : 현재 요일을 반환 (0 : 일요일, 6 : 토요일)
            - 주의할점 : 월과 일이 한자리수이면 한자리수로 표현, 두자리수로 맞추는게 좋음
                두자리수로 맞추는 방법
                    객체명.getMonth()+1 < 10 ? "0"+(객체명.getMonth()+1) : 객체명.getMonth()+1;


