[ 객체(Object) ]
    - 주체(subject)
        '나'라는 실체, 중심
    - 객체(object)
        주체(나)가 아닌 다른 실체(타인)
    - 객체지향 프로그래밍
        - 객체를 중심으로 하는 프로그래밍 패러다임
        - 내가 아닌 컴퓨터에서 실체물이 만들어지면 객체가 된다.
        - 생활속 객체
            - 안경, 의자, 컴퓨터, CPU, 강의실(공간), 책, 공기...
        - 컴퓨터속 객체
            - 고유한 속성 또는 행동을 가진다.
            - 물리적으로 존재하거나 논리(추상)적으로 존재하는 것들
            - 인기가 많은 이유 : 세상에 모든 것(성질/행동)을 디지털화 할 수 있기 때문이다.
            - JS, Java, Python, C# 등등

[ JS 객체 ]
    1. 클래스가 기반인 객체(class-object)
    2. 클래스가 없는 객체(class-free-object)
    3. JS는 클래스가 있어도 없어도 객체 생성이 가능하다. 객체 또한 자료 타입이다.
    4. JS 객체 형태 : { 속성명 : 값, 속성명 : 값, 속성명 : 값 }
        - { }를 객체로 취급하고 각 속성들은 쉼표로 구분한다.
        - 속성 : 객체가 갖는 고유한 성질, 데이터(값) / 이름, 나이, 키 등등.... 제목, 내용, 조회수 등등...
            - 속성명은 변수와 같이 식별역할을 한다.
            - 속성명에는 데이터(값), 함수, 배열, 객체 모두 대입이 가능하다.
            - 속셩명과 속성의 값을 한쌍(콜론)으로 구성 (속성 : 값)
    5. JS 객체 선언
        let 객체명 = {속성1 : 값1, 속성2 : 값2, ...}
        1. let/const
        2. 객체명
        3. = 
        4. { }
    6. JS 객체 호출
        - 객체 { }를 갖는 객체명을 호출한다.
        - console.log(객체명);
    7. 변수, 객체, 객체속성의 관계
        - { } : 자료의 타입으로 구성된 데이터 1개(Objcet)
        - let 변수 = { } : 변수가 데이터(객체) 1개를 참조한다.
        - let 변수 = {속성 : 값, 속성 : 값} : 변수가 데이터(객체) 1개를 참조하고 객체가 각 속성들을 참조한다.
    8. 객체가 속성들을 참조하는 방법
        - .(점) : 접근연산자로 객체내 속성에 접근/호출할때 사용되는 연산자/특수분자
        - 객체명.속성명
            변수의 값을 호출하는 방법 : let 변수명 = 10; / 변수명;
                배열    : let 배열명 = [] / 배열명;
                객체    : let 객체명 = {} / 객체명;
                속성값  : let 객체명 = {} / 객체명.속성명;
            함수를 호출하는 방법 : function 함수명() {} / 함수명();
    9. 객체내 속성을 다루는 방법
        - 객체내 속성값 호출 : 객체명.속성명
        - 객체내 속성 생성 : 객체명.새로운속성명 = 새로운데이터(값)
        - 객체내 속성값 수정 : 객체명.기존속성명 = 새로운데이터(값)
        - 객체내 속성값 삭제 : delete 객체명.속성명;

    10. 객체내 속성이 가질 수 있는 타입은 전부 가능하다.
        let 객체명 = {
            속성명 : 값( 리터럴(숫자, 문자열, 불리언등) ),
            속성명 : 값( 배열([]), 익명함수(function () {}), 객체({}) )
        }
        객체내 속성은 모든 타입의 데이터를 가질 수 있다.