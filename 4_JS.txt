[ JS 적용하는 방법 ]
    1. <body> 마크업 안에 <script> 마크업을 사용
        <script>
            JS코드 작성
        </script>
    2. ★ JS파일을 생성하여 HTML에서 임포트(불러오기)로 사용
        <head>
            <script src = "JS파일 경로"></script>
        </head>

[ JS ] : HTML을 조작/제어/이벤트를 사용하기 위해서
    1. 주석(주석)
        - // 한줄 주석
        - /* 여러줄 주석 */


[ 리터럴 ]
    - 키보드로부터 직접 입력한 값 그 자체

[ 변수 ] : 하나의 자료/데이터를 저장하는 메모리 공간
    1. 변수 만들기
        - let 변수명 = 값(리터럴);
    2. 변수값 호출
        변수명;
    3. 변수값 수정
        변수명 = 새로운값;
    4. 변수의 연산
        let 변수명A = 변수명B + 값(리터럴);
    5. 변수의 초기화 : 변수가 생성될때 처음에 들어가는 값
        let 변수명 = 값(리터럴); --> 값으로 초기화됨
        let 변수명;             --> 초기화 안됨
[ 배열 ]
    1. 순서대로 번호가 붙은 원소들이 연속적인 형태로 구성된 데이터 타입
        let 변수 = [1, 2, 3]
    2. 인덱스 : 배열의 순서 ( 0부터 시작 )
    3. 배열 수정
        1. 전체 수정 : 배열변수명 = [새로운배열]
        2. 특정한 위치의 요소(값) 수정 : 배열변수명[인덱스] = 새로운값
    4. 배열내 요소 추가
        배열명.push(새로운 값)  --> 배열 제일 뒤에 추가
        배열명.splice(삽입할 인덱스, 0, 새로운 값) --> 원하는 위치에 값을 추가
    5. 배열내 요소 삭제
        배열명.splice(삭제할 인덱스, 삭제개수) --> 원하는 위치의 값을 삭제
    6. 배열내 요소 찾기
        배열명.inodxOf(찾을 데이터) --> 배열내 값이 있다면 배열의 인덱스를 반환, 없으면 -1을 반환

[ 문자열 ]
    1. " " VS ' ' VS ` `으로 감싼 자료의 타입
    2. 이스케이프 제어 문자
        1. \n : 줄바꿈
        2. \t : 들여쓰기
        3. \" : " 출력
        4. \' : ' 출력
        5. \\ : \ 출력
    3. ' ' 백틱 템플릿
        - 문자열 사이에 변수 호출과 연산을 연결하는 문자열 구조
        - `문자열 A ${ 변수호출 } $ { 연산 } $ { 함수호출 } 문자열B .... `

[ 연산자 ]
    1. 산술연산자 : + ( 더하기 ), - ( 빼기 ), * ( 곱하기 ), / ( 나누기(몫) ), % ( 나누기(나머지) )
    2. 연결연산자 : +
    3. 비교연산자 : > ( 초과 ), < ( 미만 ), >= ( 이상 ), <= ( 이하 ) == ( 같다 ) , != ( 다르다 ), === (값과 타입이 같다), !== (값과 타입이 다르다)
    4. 관계연산자: && ( AND ), || ( OR ), ! ( NOT )
    5. 대입연산자: =, +=, -=, *=, /=, %=
    6. 증감연산자: 변수++, 변수--, ++변수, --변수
    7, 삼항연산자 : 조건식 ? true : false

[ 조건문 ]
    - 조건결과에 따른 흐름을 제어
    - 형태
        1. if (조건) 참일경우코드;
        2. if (조건) { 참일경우코드; 참일경우코드; }
        3. if (조건) { 참일경우코드; } else { 거짓일경우코드; }
        4. if (조건1) {
                조건1이 참일 경우 코드;
            } else if (조건2) {
                조건2가 참일 경우 코드; 
            } else if (조건3) {
                조건3이 참일 경우 코드; 
            } else if (조건4) {
                조건4가 참일 경우 코드; 
            } else {
                조건1~4가 거짓일 경우 코드; 
            }
        5. if (조건) {
            if (조건) {

            } else {
            
            }
        } else {

        }

[ 반복문 ]
    1. 조건이 충족할때 특정 범위내 코드를 반복 실행
    2. 형태
        for ( 초기값; 조건문; 증감식 ) {
            실행문;
        }
        1. 초기값 : 반복을 할때 반복의 카운터를 하는 변수의 처음값
        2. 조건문 : 반복 실행문이 실행되는 조건으로 true이면 { 실행문 } false 이면 for문 종료
        3. 증감식 : 반복변수의 증가 혹은 감소 변화 연산식
        4. 실행문 : 조건문의 true일때 실행되는 코드
    3. 배열과 반복문 관계
        1. 배열은 인덱스가 0부터 마지막 인덱스까지 1씩 증가
        2. 배열의 길이 = 배열명.length, 마지막 인덱스 = 배열명.length - 1
        3. 배열 순회 : 배열내 모든 요소를 하나씩 호출하는 작업
            for (let index = 0; index <= 배열명.length -1 ; index++) {
                배열명[index];
            }
    4. for 중첩
        for ( ) {
            for ( ) {

            }
        }
    5. 키워드
        1. continue : 가장 가까운 for문의 증감식으로 코드흐름이 이동한다.
        2. break : 가장 가까운 for문의 { } 종료/탈출 한다.
    6. 무한루프
        for ( ; ; ) { }